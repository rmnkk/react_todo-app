{"version":3,"sources":["components/Todo/Todo.js","constants/FILTER.js","components/TodoList/TodoList.js","components/TodosFilter/TodosFilter.js","components/NewTodo/NewTodo.js","components/TodosToggler/TodosToggler.js","components/TodoCount/TodoCount.js","components/TodoApp/TodoApp.js","App.js","index.js"],"names":["Todo","title","id","onCompletedChange","completed","onTodoDeletion","onTodoChange","useState","editing","setEditing","editedTitle","setEditedTitle","className","classNames","checked","type","onChange","onDoubleClick","onClick","autoFocus","value","onKeyDown","e","event","key","handleTodoEditing","onFocus","currentTarget","select","target","trimLeft","onBlur","FILTER","TodoList","todos","setTodos","filterValue","setToggleAll","filteredTodos","useMemo","filter","todo","handleCompletedChange","changedTodos","map","every","handleTodoDeletion","TodosFilter","setFilter","href","selected","innerText","NewTodo","onTodoAddition","inputValue","setInputValue","onSubmit","preventDefault","placeholder","TodosToggler","toggleAll","onToggleTodosStatus","htmlFor","TodoCount","activeTodosLength","TodoApp","setFilterValue","activeTodos","completedTodos","useEffect","JSON","parse","localStorage","getItem","setItem","stringify","Date","length","activeTodosLenght","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.1c048736.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\n\nexport const Todo = ({\n  title,\n  id,\n  onCompletedChange,\n  completed,\n  onTodoDeletion,\n  onTodoChange,\n}) => {\n  const [editing, setEditing] = useState(false);\n  const [editedTitle, setEditedTitle] = useState(title);\n\n  const handleTodoEditing = (event) => {\n    switch (event.key) {\n      case 'Enter':\n        onTodoChange(id, editedTitle);\n        setEditing(false);\n        break;\n      case 'Escape':\n        setEditedTitle(title);\n        setEditing(false);\n        break;\n      default:\n        break;\n    }\n  };\n\n  return (\n    <li\n      className={classNames({\n        completed,\n        editing,\n      })}\n    >\n      <div className=\"view\">\n        <input\n          checked={completed}\n          type=\"checkbox\"\n          className=\"toggle\"\n          onChange={() => onCompletedChange(id)}\n        />\n        <label onDoubleClick={() => setEditing(true)}>\n          {title}\n        </label>\n        <button\n          type=\"button\"\n          className=\"destroy\"\n          onClick={() => {\n            onTodoDeletion(id);\n          }}\n        />\n      </div>\n\n      {editing && (\n        <input\n          autoFocus={editing}\n          type=\"text\"\n          className=\"edit\"\n          value={editedTitle}\n          onKeyDown={e => handleTodoEditing(e)}\n          onFocus={e => e.currentTarget.select()}\n          onChange={e => setEditedTitle(e.target.value.trimLeft())}\n          onBlur={() => {\n            onTodoChange(id, editedTitle);\n\n            if (!editedTitle) {\n              onTodoDeletion(id);\n            }\n\n            setEditing(false);\n          }}\n        />\n      )}\n    </li>\n  );\n};\n\nTodo.propTypes = {\n  id: PropTypes.number.isRequired,\n  title: PropTypes.string.isRequired,\n  onCompletedChange: PropTypes.func.isRequired,\n  completed: PropTypes.bool.isRequired,\n  onTodoDeletion: PropTypes.func.isRequired,\n  onTodoChange: PropTypes.func.isRequired,\n};\n","export const FILTER = {\n  all: 'All',\n  active: 'Active',\n  completed: 'Completed',\n};\n","import React, { useMemo } from 'react';\nimport PropTypes from 'prop-types';\nimport { Todo } from '../Todo';\nimport { FILTER } from '../../constants/FILTER';\n\nexport const TodoList = ({\n  todos,\n  setTodos,\n  filterValue,\n  onTodoChange,\n  setToggleAll,\n}) => {\n  const filteredTodos = useMemo(() => {\n    switch (filterValue) {\n      case FILTER.active:\n        return todos.filter(todo => !todo.completed);\n      case FILTER.completed:\n        return todos.filter(todo => todo.completed);\n      default:\n        return todos;\n    }\n  }, [filterValue, todos]);\n\n  const handleCompletedChange = (id) => {\n    const changedTodos = todos.map((todo) => {\n      if (todo.id === id) {\n        return {\n          ...todo,\n          completed: !todo.completed,\n        };\n      }\n\n      return { ...todo };\n    });\n\n    setTodos(changedTodos);\n\n    if (changedTodos.every(todo => todo.completed)) {\n      setToggleAll(true);\n    } else {\n      setToggleAll(false);\n    }\n  };\n\n  const handleTodoDeletion = (id) => {\n    setTodos(todos.filter(todo => todo.id !== id));\n  };\n\n  return (\n    <ul className=\"todo-list\">\n      {filteredTodos.map(todo => (\n        <Todo\n          onCompletedChange={handleCompletedChange}\n          onTodoDeletion={handleTodoDeletion}\n          setTodos={setTodos}\n          onTodoChange={onTodoChange}\n          key={todo.id}\n          {...todo}\n        />\n      ))}\n    </ul>\n  );\n};\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      title: PropTypes.string.isRequired,\n      completed: PropTypes.bool,\n    }).isRequired,\n  ).isRequired,\n  setTodos: PropTypes.func.isRequired,\n  filterValue: PropTypes.string.isRequired,\n  onTodoChange: PropTypes.func.isRequired,\n  setToggleAll: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { FILTER } from '../../constants/FILTER';\n\nexport const TodosFilter = ({ setFilter, filterValue }) => (\n  <ul className=\"filters\">\n    <li>\n      <a\n        href=\"#/\"\n        className={classNames({\n          selected: filterValue === FILTER.all,\n        })}\n        onClick={e => setFilter(e.target.innerText)}\n      >\n        All\n      </a>\n    </li>\n\n    <li>\n      <a\n        href=\"#/active\"\n        className={classNames({\n          selected: filterValue === FILTER.active,\n        })}\n        onClick={e => setFilter(e.target.innerText)}\n      >\n        Active\n      </a>\n    </li>\n\n    <li>\n      <a\n        href=\"#/completed\"\n        className={classNames({\n          selected: filterValue === FILTER.completed,\n        })}\n        onClick={e => setFilter(e.target.innerText)}\n      >\n        Completed\n      </a>\n    </li>\n  </ul>\n);\n\nTodosFilter.propTypes = {\n  setFilter: PropTypes.func.isRequired,\n  filterValue: PropTypes.string.isRequired,\n};\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nexport const NewTodo = ({ onTodoAddition }) => {\n  const [inputValue, setInputValue] = useState('');\n\n  return (\n    <form\n      onSubmit={(e) => {\n        e.preventDefault();\n        onTodoAddition(inputValue);\n\n        setInputValue('');\n      }}\n    >\n      <input\n        value={inputValue}\n        type=\"text\"\n        className=\"new-todo\"\n        placeholder=\"What needs to be done?\"\n        onChange={e => setInputValue(e.target.value.trimLeft())}\n      />\n    </form>\n  );\n};\n\nNewTodo.propTypes = {\n  onTodoAddition: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport const TodosToggler = ({ toggleAll, onToggleTodosStatus }) => (\n  <>\n    <input\n      checked={toggleAll}\n      type=\"checkbox\"\n      id=\"toggle-all\"\n      className=\"toggle-all\"\n      onChange={() => {\n        onToggleTodosStatus();\n      }}\n    />\n    <label htmlFor=\"toggle-all\">Mark all as complete</label>\n  </>\n);\n\nTodosToggler.propTypes = {\n  toggleAll: PropTypes.bool.isRequired,\n  onToggleTodosStatus: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport const TodoCount = ({ activeTodosLength }) => (\n  <span className=\"todo-count\">\n    {activeTodosLength === 1 && (\n      `${activeTodosLength} item left`\n    )}\n\n    {activeTodosLength !== 1 && (\n      `${activeTodosLength} items left`\n    )}\n  </span>\n);\n\nTodoCount.propTypes = {\n  activeTodosLength: PropTypes.number.isRequired,\n};\n","import React, { useState, useEffect, useMemo } from 'react';\nimport { TodoList } from '../TodoList';\nimport { TodosFilter } from '../TodosFilter';\nimport { NewTodo } from '../NewTodo';\nimport { TodosToggler } from '../TodosToggler';\nimport { TodoCount } from '../TodoCount';\nimport { FILTER } from '../../constants/FILTER';\n\nexport const TodoApp = () => {\n  const [todos, setTodos] = useState([]);\n  const [toggleAll, setToggleAll] = useState(false);\n  const [filterValue, setFilterValue] = useState(FILTER.all);\n\n  const activeTodos = useMemo(() => todos\n    .filter(todo => !todo.completed), [todos]);\n  const completedTodos = useMemo(() => todos\n    .filter(todo => todo.completed), [todos]);\n\n  useEffect(() => {\n    if (\n      JSON.parse(localStorage.getItem('todos')).every(todo => todo.completed)\n    ) {\n      setToggleAll(true);\n    }\n\n    if (localStorage.getItem('todos')) {\n      setTodos([...JSON.parse(localStorage.getItem('todos'))]);\n    }\n  }, []);\n\n  useEffect(() => {\n    localStorage.setItem('todos', JSON.stringify(todos));\n  }, [todos]);\n\n  const handleTodoAddition = (title) => {\n    if (title) {\n      setTodos([...todos, {\n        id: +new Date(),\n        title,\n        completed: false,\n      }]);\n    }\n  };\n\n  const handleToggleTodosStatus = () => {\n    setTodos(todos.map(todo => ({\n      ...todo,\n      completed: !toggleAll,\n    })));\n\n    setToggleAll(!toggleAll);\n  };\n\n  const handleTodoChange = (id, editedTitle) => {\n    if (editedTitle) {\n      setTodos(todos.map((todo) => {\n        if (todo.id === id) {\n          return {\n            ...todo,\n            title: editedTitle,\n          };\n        }\n\n        return { ...todo };\n      }));\n    }\n  };\n\n  return (\n    <section className=\"todoapp\">\n      <header className=\"header\">\n        <h1>todos</h1>\n\n        <NewTodo\n          onTodoAddition={handleTodoAddition}\n        />\n      </header>\n\n      {todos.length > 0 && (\n        <>\n          <section className=\"main\">\n            <TodosToggler\n              activeTodosLenght={activeTodos.length}\n              toggleAll={toggleAll}\n              onToggleTodosStatus={handleToggleTodosStatus}\n            />\n\n            <TodoList\n              filterValue={filterValue}\n              setToggleAll={setToggleAll}\n              toggleAll={toggleAll}\n              setTodos={setTodos}\n              todos={todos}\n              onTodoChange={handleTodoChange}\n            />\n          </section>\n\n          <footer className=\"footer\">\n            <TodoCount activeTodosLength={activeTodos.length} />\n\n            <TodosFilter\n              filterValue={filterValue}\n              setFilter={setFilterValue}\n            />\n\n            {completedTodos.length > 0 && (\n              <button\n                type=\"button\"\n                className=\"clear-completed\"\n                onClick={() => {\n                  setTodos(activeTodos);\n                }}\n              >\n                Clear completed\n              </button>\n            )}\n          </footer>\n        </>\n      )}\n    </section>\n  );\n};\n","import React from 'react';\nimport { TodoApp } from './components/TodoApp';\n\nfunction App() {\n  return (\n    <TodoApp />\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './styles/index.css';\nimport './styles/todo-list.css';\nimport './styles/filters.css';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}