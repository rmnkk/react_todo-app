{"version":3,"sources":["components/Todo/Todo.js","components/TodoList/TodoList.js","components/TodosFilter/TodosFilter.js","components/NewTodo/NewTodo.js","components/TodosToggler/TodosToggler.js","components/TodoCount/TodoCount.js","components/TodoApp/TodoApp.js","App.js","index.js"],"names":["Todo","title","id","onCompletedChange","completed","onTodoDeletion","onTodoChange","useState","editing","setEditing","editedTitle","setEditedTitle","className","classNames","onDoubleClick","checked","type","onChange","onClick","value","e","target","trimLeft","onBlur","TodoList","todosToRender","todos","setTodos","filterValue","filter","todo","handleCompletedChange","map","handleTodoDeletion","key","TodosFilter","setFilter","href","selected","innerText","NewTodo","inputValue","setInputValue","onTodoAddition","onSubmit","preventDefault","placeholder","TodosToggler","toggleAll","onToggleTodosStatus","htmlFor","TodoCount","activeTodos","length","TodoApp","setToggleAll","setFilterValue","completedTodos","useEffect","every","localStorage","getItem","JSON","parse","setItem","stringify","Date","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ef0f6967.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\n\nexport const Todo = ({\n  title,\n  id,\n  onCompletedChange,\n  completed,\n  onTodoDeletion,\n  onTodoChange,\n}) => {\n  const [editing, setEditing] = useState(false);\n  const [editedTitle, setEditedTitle] = useState(title);\n\n  return (\n    <li\n      className={classNames({\n        completed,\n        editing,\n      })}\n      onDoubleClick={() => setEditing(true)}\n    >\n      <div className=\"view\">\n        <input\n          checked={completed}\n          type=\"checkbox\"\n          className=\"toggle\"\n          onChange={() => {\n            onCompletedChange(id);\n          }}\n        />\n        <label>\n          {title}\n        </label>\n        <button\n          type=\"button\"\n          className=\"destroy\"\n          onClick={() => {\n            onTodoDeletion(id);\n          }}\n        />\n      </div>\n\n      <input\n        type=\"text\"\n        className=\"edit\"\n        value={editedTitle}\n        onChange={e => setEditedTitle(e.target.value.trimLeft())}\n        onBlur={() => {\n          onTodoChange(id, editedTitle);\n          setEditing(false);\n        }}\n      />\n    </li>\n  );\n};\n\nTodo.propTypes = {\n  id: PropTypes.number.isRequired,\n  title: PropTypes.string.isRequired,\n  onCompletedChange: PropTypes.func.isRequired,\n  completed: PropTypes.bool.isRequired,\n  onTodoDeletion: PropTypes.func.isRequired,\n  onTodoChange: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Todo } from '../Todo';\n\nexport const TodoList = ({ todos, setTodos, filterValue, onTodoChange }) => {\n  let todosToRender;\n\n  switch (filterValue) {\n    case 'Active':\n      todosToRender = todos.filter(todo => !todo.completed);\n      break;\n    case 'Completed':\n      todosToRender = todos.filter(todo => todo.completed);\n      break;\n    default:\n      todosToRender = todos;\n  }\n\n  const handleCompletedChange = (id) => {\n    setTodos(todos.map((todo) => {\n      if (todo.id === id) {\n        return {\n          ...todo,\n          completed: !todo.completed,\n        };\n      }\n\n      return { ...todo };\n    }));\n  };\n\n  const handleTodoDeletion = (id) => {\n    setTodos(todos.filter(todo => todo.id !== id));\n  };\n\n  return (\n    <ul className=\"todo-list\">\n      {todosToRender.map(todo => (\n        <Todo\n          onCompletedChange={handleCompletedChange}\n          onTodoDeletion={handleTodoDeletion}\n          setTodos={setTodos}\n          onTodoChange={onTodoChange}\n          key={todo.id}\n          {...todo}\n        />\n      ))}\n    </ul>\n  );\n};\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      title: PropTypes.string.isRequired,\n      completed: PropTypes.bool,\n    }).isRequired,\n  ).isRequired,\n  setTodos: PropTypes.func.isRequired,\n  filterValue: PropTypes.string.isRequired,\n  onTodoChange: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\n\nexport const TodosFilter = ({ setFilter, filterValue }) => (\n  <ul className=\"filters\">\n    <li>\n      <a\n        href=\"#/\"\n        className={classNames({\n          selected: filterValue === 'All',\n        })}\n        onClick={e => setFilter(e.target.innerText)}\n      >\n        All\n      </a>\n    </li>\n\n    <li>\n      <a\n        href=\"#/active\"\n        className={classNames({\n          selected: filterValue === 'Active',\n        })}\n        onClick={e => setFilter(e.target.innerText)}\n      >\n        Active\n      </a>\n    </li>\n\n    <li>\n      <a\n        href=\"#/completed\"\n        className={classNames({\n          selected: filterValue === 'Completed',\n        })}\n        onClick={e => setFilter(e.target.innerText)}\n      >\n        Completed\n      </a>\n    </li>\n  </ul>\n);\n\nTodosFilter.propTypes = {\n  setFilter: PropTypes.func.isRequired,\n  filterValue: PropTypes.string.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport const NewTodo = ({ inputValue, setInputValue, onTodoAddition }) => (\n  <form\n    onSubmit={(e) => {\n      e.preventDefault();\n      onTodoAddition(inputValue);\n    }}\n  >\n    <input\n      value={inputValue}\n      type=\"text\"\n      className=\"new-todo\"\n      placeholder=\"What needs to be done?\"\n      onChange={e => setInputValue(e.target.value.trimLeft())}\n    />\n  </form>\n);\n\nNewTodo.propTypes = {\n  inputValue: PropTypes.string.isRequired,\n  setInputValue: PropTypes.func.isRequired,\n  onTodoAddition: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport const TodosToggler = ({ toggleAll, onToggleTodosStatus }) => (\n  <>\n    <input\n      checked={toggleAll}\n      type=\"checkbox\"\n      id=\"toggle-all\"\n      className=\"toggle-all\"\n      onChange={() => {\n        onToggleTodosStatus();\n      }}\n    />\n    <label htmlFor=\"toggle-all\">Mark all as complete</label>\n  </>\n);\n\nTodosToggler.propTypes = {\n  toggleAll: PropTypes.bool.isRequired,\n  onToggleTodosStatus: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport const TodoCount = ({ activeTodos }) => (\n  <span className=\"todo-count\">\n    {activeTodos.length === 1 && (\n      `${activeTodos.length} item left`\n    )}\n\n    {activeTodos.length !== 1 && (\n      `${activeTodos.length} items left`\n    )}\n  </span>\n);\n\nTodoCount.propTypes = {\n  activeTodos: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      title: PropTypes.string.isRequired,\n      completed: PropTypes.bool,\n    }).isRequired,\n  ).isRequired,\n};\n","import React, { useState, useEffect } from 'react';\nimport { TodoList } from '../TodoList';\nimport { TodosFilter } from '../TodosFilter';\nimport { NewTodo } from '../NewTodo';\nimport { TodosToggler } from '../TodosToggler';\nimport { TodoCount } from '../TodoCount';\n\nexport const TodoApp = () => {\n  const [inputValue, setInputValue] = useState('');\n  const [todos, setTodos] = useState([]);\n  const [toggleAll, setToggleAll] = useState(false);\n  const [filterValue, setFilterValue] = useState('All');\n\n  const activeTodos = todos.filter(todo => !todo.completed);\n  const completedTodos = todos.filter(todo => todo.completed);\n\n  useEffect(() => {\n    setToggleAll(todos.every(todo => todo.completed));\n  }, [todos]);\n\n  useEffect(() => {\n    if (localStorage.getItem('todos')) {\n      setTodos([...JSON.parse(localStorage.getItem('todos'))]);\n    }\n  }, []);\n\n  useEffect(() => {\n    localStorage.setItem('todos', JSON.stringify(todos));\n  }, [todos]);\n\n  const handleTodoAddition = (title) => {\n    if (title) {\n      setTodos([...todos, {\n        id: +new Date(),\n        title,\n        completed: false,\n      }]);\n    }\n\n    setInputValue('');\n  };\n\n  const handleToggleTodosStatus = () => {\n    setToggleAll(!toggleAll);\n\n    setTodos(todos.map(todo => ({\n      ...todo,\n      completed: !toggleAll,\n    })));\n  };\n\n  const handleTodoChange = (id, editedTitle) => {\n    setTodos(todos.map((todo) => {\n      if (todo.id === id) {\n        return {\n          ...todo,\n          title: editedTitle,\n        };\n      }\n\n      return { ...todo };\n    }));\n  };\n\n  return (\n    <section className=\"todoapp\">\n      <header className=\"header\">\n        <h1>todos</h1>\n\n        <NewTodo\n          inputValue={inputValue}\n          setInputValue={setInputValue}\n          onTodoAddition={handleTodoAddition}\n        />\n      </header>\n\n      {todos.length > 0 && (\n        <section className=\"main\">\n          <TodosToggler\n            toggleAll={toggleAll}\n            onToggleTodosStatus={handleToggleTodosStatus}\n          />\n\n          <TodoList\n            filterValue={filterValue}\n            setToggleAll={setToggleAll}\n            toggleAll={toggleAll}\n            setTodos={setTodos}\n            todos={todos}\n            onTodoChange={handleTodoChange}\n          />\n        </section>\n      )}\n\n      {todos.length > 0 && (\n        <footer className=\"footer\">\n          <TodoCount activeTodos={activeTodos} />\n\n          <TodosFilter\n            filterValue={filterValue}\n            setFilter={setFilterValue}\n          />\n\n          {completedTodos.length > 0 && (\n            <button\n              type=\"button\"\n              className=\"clear-completed\"\n              onClick={() => {\n                setTodos(todos.filter(todo => !todo.completed));\n              }}\n            >\n              Clear completed\n            </button>\n          )}\n        </footer>\n      )}\n    </section>\n  );\n};\n","import React from 'react';\nimport { TodoApp } from './components/TodoApp';\n\nfunction App() {\n  return (\n    <TodoApp />\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './styles/index.css';\nimport './styles/todo-list.css';\nimport './styles/filters.css';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}