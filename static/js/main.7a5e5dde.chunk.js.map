{"version":3,"sources":["components/Todo/Todo.js","components/TodoList/TodoList.js","components/TodosFilter/TodosFilter.js","components/NewTodo/NewTodo.js","components/TodosToggler/TodosToggler.js","components/TodoCount/TodoCount.js","components/TodoApp/TodoApp.js","App.js","index.js"],"names":["Todo","title","id","onCompletedChange","completed","onTodoDeletion","onTodoChange","useState","editing","setEditing","editedTitle","setEditedTitle","className","classNames","checked","type","onChange","onDoubleClick","onClick","autoFocus","value","onKeyDown","e","event","keyCode","handleTodoEditing","onFocus","currentTarget","select","target","trimLeft","onBlur","TodoList","todosToRender","todos","setTodos","filterValue","filter","todo","handleCompletedChange","map","handleTodoDeletion","key","TodosFilter","setFilter","href","selected","innerText","NewTodo","inputValue","setInputValue","onTodoAddition","onSubmit","preventDefault","placeholder","TodosToggler","toggleAll","onToggleTodosStatus","htmlFor","TodoCount","activeTodos","length","TodoApp","setToggleAll","setFilterValue","completedTodos","useEffect","every","localStorage","getItem","JSON","parse","setItem","stringify","Date","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.7a5e5dde.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\n\nexport const Todo = ({\n  title,\n  id,\n  onCompletedChange,\n  completed,\n  onTodoDeletion,\n  onTodoChange,\n}) => {\n  const [editing, setEditing] = useState(false);\n  const [editedTitle, setEditedTitle] = useState(title);\n\n  const handleTodoEditing = (event) => {\n    switch (event.keyCode) {\n      case 13:\n        onTodoChange(id, editedTitle);\n        setEditing(false);\n        break;\n      case 27:\n        setEditing(false);\n        break;\n      default:\n        break;\n    }\n  };\n\n  return (\n    <li\n      className={classNames({\n        completed,\n        editing,\n      })}\n    >\n      <div className=\"view\">\n        <input\n          checked={completed}\n          type=\"checkbox\"\n          className=\"toggle\"\n          onChange={() => {\n            onCompletedChange(id);\n          }}\n        />\n        <label onDoubleClick={() => setEditing(true)}>\n          {title}\n        </label>\n        <button\n          type=\"button\"\n          className=\"destroy\"\n          onClick={() => {\n            onTodoDeletion(id);\n          }}\n        />\n      </div>\n\n      {editing && (\n        <input\n          autoFocus={editing}\n          type=\"text\"\n          className=\"edit\"\n          value={editedTitle}\n          onKeyDown={e => handleTodoEditing(e)}\n          onFocus={e => e.currentTarget.select()}\n          onChange={e => setEditedTitle(e.target.value.trimLeft())}\n          onBlur={() => {\n            onTodoChange(id, editedTitle);\n\n            if (!editedTitle) {\n              onTodoDeletion(id);\n            }\n\n            setEditing(false);\n          }}\n        />\n      )}\n    </li>\n  );\n};\n\nTodo.propTypes = {\n  id: PropTypes.number.isRequired,\n  title: PropTypes.string.isRequired,\n  onCompletedChange: PropTypes.func.isRequired,\n  completed: PropTypes.bool.isRequired,\n  onTodoDeletion: PropTypes.func.isRequired,\n  onTodoChange: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Todo } from '../Todo';\n\nexport const TodoList = ({ todos, setTodos, filterValue, onTodoChange }) => {\n  let todosToRender;\n\n  switch (filterValue) {\n    case 'Active':\n      todosToRender = todos.filter(todo => !todo.completed);\n      break;\n    case 'Completed':\n      todosToRender = todos.filter(todo => todo.completed);\n      break;\n    default:\n      todosToRender = todos;\n  }\n\n  const handleCompletedChange = (id) => {\n    setTodos(todos.map((todo) => {\n      if (todo.id === id) {\n        return {\n          ...todo,\n          completed: !todo.completed,\n        };\n      }\n\n      return { ...todo };\n    }));\n  };\n\n  const handleTodoDeletion = (id) => {\n    setTodos(todos.filter(todo => todo.id !== id));\n  };\n\n  return (\n    <ul className=\"todo-list\">\n      {todosToRender.map(todo => (\n        <Todo\n          onCompletedChange={handleCompletedChange}\n          onTodoDeletion={handleTodoDeletion}\n          setTodos={setTodos}\n          onTodoChange={onTodoChange}\n          key={todo.id}\n          {...todo}\n        />\n      ))}\n    </ul>\n  );\n};\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      title: PropTypes.string.isRequired,\n      completed: PropTypes.bool,\n    }).isRequired,\n  ).isRequired,\n  setTodos: PropTypes.func.isRequired,\n  filterValue: PropTypes.string.isRequired,\n  onTodoChange: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\n\nexport const TodosFilter = ({ setFilter, filterValue }) => (\n  <ul className=\"filters\">\n    <li>\n      <a\n        href=\"#/\"\n        className={classNames({\n          selected: filterValue === 'All',\n        })}\n        onClick={e => setFilter(e.target.innerText)}\n      >\n        All\n      </a>\n    </li>\n\n    <li>\n      <a\n        href=\"#/active\"\n        className={classNames({\n          selected: filterValue === 'Active',\n        })}\n        onClick={e => setFilter(e.target.innerText)}\n      >\n        Active\n      </a>\n    </li>\n\n    <li>\n      <a\n        href=\"#/completed\"\n        className={classNames({\n          selected: filterValue === 'Completed',\n        })}\n        onClick={e => setFilter(e.target.innerText)}\n      >\n        Completed\n      </a>\n    </li>\n  </ul>\n);\n\nTodosFilter.propTypes = {\n  setFilter: PropTypes.func.isRequired,\n  filterValue: PropTypes.string.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport const NewTodo = ({ inputValue, setInputValue, onTodoAddition }) => (\n  <form\n    onSubmit={(e) => {\n      e.preventDefault();\n      onTodoAddition(inputValue);\n    }}\n  >\n    <input\n      value={inputValue}\n      type=\"text\"\n      className=\"new-todo\"\n      placeholder=\"What needs to be done?\"\n      onChange={e => setInputValue(e.target.value.trimLeft())}\n    />\n  </form>\n);\n\nNewTodo.propTypes = {\n  inputValue: PropTypes.string.isRequired,\n  setInputValue: PropTypes.func.isRequired,\n  onTodoAddition: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport const TodosToggler = ({ toggleAll, onToggleTodosStatus }) => (\n  <>\n    <input\n      checked={toggleAll}\n      type=\"checkbox\"\n      id=\"toggle-all\"\n      className=\"toggle-all\"\n      onChange={() => {\n        onToggleTodosStatus();\n      }}\n    />\n    <label htmlFor=\"toggle-all\">Mark all as complete</label>\n  </>\n);\n\nTodosToggler.propTypes = {\n  toggleAll: PropTypes.bool.isRequired,\n  onToggleTodosStatus: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport const TodoCount = ({ activeTodos }) => (\n  <span className=\"todo-count\">\n    {activeTodos.length === 1 && (\n      `${activeTodos.length} item left`\n    )}\n\n    {activeTodos.length !== 1 && (\n      `${activeTodos.length} items left`\n    )}\n  </span>\n);\n\nTodoCount.propTypes = {\n  activeTodos: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      title: PropTypes.string.isRequired,\n      completed: PropTypes.bool,\n    }).isRequired,\n  ).isRequired,\n};\n","import React, { useState, useEffect } from 'react';\nimport { TodoList } from '../TodoList';\nimport { TodosFilter } from '../TodosFilter';\nimport { NewTodo } from '../NewTodo';\nimport { TodosToggler } from '../TodosToggler';\nimport { TodoCount } from '../TodoCount';\n\nexport const TodoApp = () => {\n  const [inputValue, setInputValue] = useState('');\n  const [todos, setTodos] = useState([]);\n  const [toggleAll, setToggleAll] = useState(false);\n  const [filterValue, setFilterValue] = useState('All');\n\n  const activeTodos = todos.filter(todo => !todo.completed);\n  const completedTodos = todos.filter(todo => todo.completed);\n\n  useEffect(() => {\n    setToggleAll(todos.every(todo => todo.completed));\n  }, [todos]);\n\n  useEffect(() => {\n    if (localStorage.getItem('todos')) {\n      setTodos([...JSON.parse(localStorage.getItem('todos'))]);\n    }\n  }, []);\n\n  useEffect(() => {\n    localStorage.setItem('todos', JSON.stringify(todos));\n  }, [todos]);\n\n  const handleTodoAddition = (title) => {\n    if (title) {\n      setTodos([...todos, {\n        id: +new Date(),\n        title,\n        completed: false,\n      }]);\n    }\n\n    setInputValue('');\n  };\n\n  const handleToggleTodosStatus = () => {\n    setToggleAll(!toggleAll);\n\n    setTodos(todos.map(todo => ({\n      ...todo,\n      completed: !toggleAll,\n    })));\n  };\n\n  const handleTodoChange = (id, editedTitle) => {\n    if (editedTitle) {\n      setTodos(todos.map((todo) => {\n        if (todo.id === id) {\n          return {\n            ...todo,\n            title: editedTitle,\n          };\n        }\n\n        return { ...todo };\n      }));\n    }\n  };\n\n  return (\n    <section className=\"todoapp\">\n      <header className=\"header\">\n        <h1>todos</h1>\n\n        <NewTodo\n          inputValue={inputValue}\n          setInputValue={setInputValue}\n          onTodoAddition={handleTodoAddition}\n        />\n      </header>\n\n      {todos.length > 0 && (\n        <section className=\"main\">\n          <TodosToggler\n            toggleAll={toggleAll}\n            onToggleTodosStatus={handleToggleTodosStatus}\n          />\n\n          <TodoList\n            filterValue={filterValue}\n            setToggleAll={setToggleAll}\n            toggleAll={toggleAll}\n            setTodos={setTodos}\n            todos={todos}\n            onTodoChange={handleTodoChange}\n          />\n        </section>\n      )}\n\n      {todos.length > 0 && (\n        <footer className=\"footer\">\n          <TodoCount activeTodos={activeTodos} />\n\n          <TodosFilter\n            filterValue={filterValue}\n            setFilter={setFilterValue}\n          />\n\n          {completedTodos.length > 0 && (\n            <button\n              type=\"button\"\n              className=\"clear-completed\"\n              onClick={() => {\n                setTodos(todos.filter(todo => !todo.completed));\n              }}\n            >\n              Clear completed\n            </button>\n          )}\n        </footer>\n      )}\n    </section>\n  );\n};\n","import React from 'react';\nimport { TodoApp } from './components/TodoApp';\n\nfunction App() {\n  return (\n    <TodoApp />\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './styles/index.css';\nimport './styles/todo-list.css';\nimport './styles/filters.css';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}